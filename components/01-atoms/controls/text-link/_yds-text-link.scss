@use '~@yalesites-org/tokens/build/scss/tokens' as sass-tokens;
@use '../../../00-tokens/functions/map';
@use '../../../00-tokens/tokens';

$link-themes: map.deep-get(sass-tokens.$tokens, color, link, theme);
$global-link-themes: map.deep-get(tokens.$tokens, 'global-themes');

:root {
  // Component themes
  @each $theme, $value in $link-themes {
    [data-basic-theme='#{$theme}'] {
      --color-link-base: var(--color-link-theme-#{$theme}-base);
      --color-link-hover: var(--color-link-theme-#{$theme}-hover);
      --color-text-shadow: var(--color-background-#{$theme}-background-color);
    }
  }
}

// Mixin for generic links.
// Style options are "default" or "no-underline" or "no-animation".
// The style name indicates the initial appearance.
@mixin link($style: default, $family-weight: 'mallory-medium') {
  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-link-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-link-hover: var(--color-slot-two);
    }
  }

  @include tokens.underline-slide-start($variation: #{$style});

  color: var(--color-link-base);
  text-decoration: none;
  font-weight: var(--font-weights-#{$family-weight});
  line-height: normal;

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-link-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-link-hover: var(--color-slot-two);
    }
  }

  // This text shadow will make the animated underline appear to avoid
  // descenders in content.
  // inspired by:
  // https://github.com/adamschwartz/magic-of-css/commit/35fa2f5ab36aa8c81f053f5a8c7b67b60c79ae5b

  text-shadow: 0.03em 0 var(--color-text-shadow),
    -0.03em 0 var(--color-text-shadow), 0 0.03em var(--color-text-shadow),
    0 -0.03em var(--color-text-shadow), 0.06em 0 var(--color-text-shadow),
    -0.06em 0 var(--color-text-shadow), 0.09em 0 var(--color-text-shadow),
    -0.09em 0 var(--color-text-shadow), 0.12em 0 var(--color-text-shadow),
    -0.12em 0 var(--color-text-shadow), 0.15em 0 var(--color-text-shadow),
    -0.15em 0 var(--color-text-shadow);

  // Animate the decorative bar when the link is hovered.
  &:hover {
    @include tokens.underline-slide-end($variation: #{$style});

    color: var(--color-link-hover);
  }

  // Remove underline when focus is visible.
  &:focus-visible {
    @include tokens.underline-slide-none;
  }
}

// This mixin is primarily used in instances in which the link mixin
// (and underline-slide-start) doesn't work.
// Specifically, in instances where we want a plain text link with an underline
// decoration but also want to control the thickness of the underline.
// Currently used in: components/02-molecules/banner/grand-hero/_yds-grand-hero.scss
// and directly referenced at the bottom of this file in:
// &[data-link-style='no-underline-animation']
@mixin plain-link {
  @include tokens.animate;

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-link-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-link-hover: var(--color-slot-two);
    }
  }

  color: var(--color-link-base);
  text-decoration: underline;
  text-decoration-thickness: 0.1em;
  font-weight: var(--font-weights-mallory-medium);
  line-height: normal;

  &:hover {
    text-decoration: none;
    color: var(--color-link-hover);
  }
}

// This mixin is used to style linked headings in components that should be
// "fully clickable". e.g. When an entire card is clickable, this applies the
// appropriate styles to the heading inside the card.
// NOTES:
// - Apply the mixin to the parent item. e.g.: `.card` and it will affect
// the `.card__heading-link` element inside.
// - The component will likely also need some JS to round out the design and
// functionality desired. Check `reference-card.js` for an example. And/or read
// the Cards chapter here: https://inclusive-components.design/cards.
@mixin clickable-component-heading-link {
  // Style the component when it's heading is focused.
  &:focus-within {
    @include tokens.focus-styles;
  }

  // Style the heading link inside the component.
  [class*='__heading-link'] {
    @include tokens.underline-slide-start('no-underline');

    // Global themes: set color slots for each theme
    // This establishes `--color-slot-` variables name-spaced to the selector
    // in which it is used. We can map component-level variables to global-level
    // `--color-slot-` variables.
    @each $globalTheme, $value in $global-link-themes {
      [data-global-theme='#{$globalTheme}'] & {
        --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
        --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
        --color-slot-three: var(
          --global-themes-#{$globalTheme}-colors-slot-three
        );
        --color-slot-four: var(
          --global-themes-#{$globalTheme}-colors-slot-four
        );
        --color-slot-five: var(
          --global-themes-#{$globalTheme}-colors-slot-five
        );
        --color-link-hover: var(--color-slot-two);
      }
    }

    color: currentcolor;
    text-decoration: none;
    font-weight: var(--font-weights-yalenew-bold);
    letter-spacing: var(--font-letter-spacing-yalenew-bold);

    // adjust position so the text-shadow aligns nicely with the text.
    --position: 0 1.05em;

    // This text shadow will make the animated underline appear to avoid
    // descenders in content.
    // inspired by:
    // https://github.com/adamschwartz/magic-of-css/commit/35fa2f5ab36aa8c81f053f5a8c7b67b60c79ae5b

    text-shadow: 0.03em 0 var(--color-text-shadow),
      -0.03em 0 var(--color-text-shadow), 0 0.03em var(--color-text-shadow),
      0 -0.03em var(--color-text-shadow), 0.06em 0 var(--color-text-shadow),
      -0.06em 0 var(--color-text-shadow), 0.09em 0 var(--color-text-shadow),
      -0.09em 0 var(--color-text-shadow), 0.12em 0 var(--color-text-shadow),
      -0.12em 0 var(--color-text-shadow), 0.15em 0 var(--color-text-shadow),
      -0.15em 0 var(--color-text-shadow);

    &:focus {
      // Setting `outline: none` is generally a huge no-no! In this case,
      // however, we're visually and functionally making the entire component
      // "clickable", so we've added focus styles to the component itself using
      // `:focus-within` above, so we can safely remove this outline, since it
      // would otherwise be redundant and create confusion as two different
      // elements would appear to be focused at the same time.
      outline: none;
    }
  }

  // Style the heading link when the component is hovered.
  &:hover [class*='__heading-link'] {
    @include tokens.underline-slide-end('no-underline');

    color: var(--color-link-hover);
  }

  // Style the heading link when the component is focused.
  &:focus-visible [class*='__heading-link'] {
    @include tokens.underline-slide-end('no-underline');
  }
}

.link {
  &[data-link-style='underline'] {
    @include link;

    // set default --color-text-shadow
    --color-text-shadow: var(--color-basic-white);
  }

  &[data-link-style='underline-with-icon'] {
    @include link;

    // set default --color-text-shadow
    --color-text-shadow: var(--color-basic-white);

    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    width: fit-content;
    background-size: calc(100% - var(--size-spacing-3)) var(--thickness);
  }

  &[data-link-style='no-underline'] {
    @include link(no-underline);
  }

  &[data-link-style='no-underline-animation'] {
    @include plain-link;
  }
}
