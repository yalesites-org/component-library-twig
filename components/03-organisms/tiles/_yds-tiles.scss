@use '../../00-tokens/tokens';
@use '../../00-tokens/functions/map';
@use '../../01-atoms/atoms';
@use '../grid-mixins' as grid;

.tiles {
  @include tokens.spacing-page-section($banner-spacing: true);

  padding-block: var(--size-spacing-11);
  width: 100%;
  position: relative;
}

.tiles__inner {
  width: 100%;
  max-width: var(--component-width);
}

.tiles__wrap {
  @include grid.base;

  // position relative added to use z-index and make sure the image is behind the content
  position: relative;
  z-index: 1;

  --grid-gutter: var(--spacing-component-gutter-secondary);

  > * {
    @media (min-width: tokens.$break-s) {
      flex: 0 1 calc(50% - calc(var(--grid-gutter) * 2 / 3));
    }

    @media (min-width: tokens.$break-m) {
      flex: 0 1 calc(33.33% - calc(var(--grid-gutter) * 2 / 3));
    }

    @media (min-width: tokens.$break-l) {
      flex: 0 1 calc(25% - calc(var(--grid-gutter) * 3 / 4));
    }
  }

  [data-component-grid-count='two'] & {
    > * {
      @media (min-width: tokens.$break-s) {
        flex: 0 1 calc(50% - var(--grid-gutter));
        max-width: calc(50% - var(--grid-gutter));
      }
    }
  }

  [data-component-grid-count='three'] & {
    > * {
      @media (min-width: tokens.$break-s) {
        flex: 0 calc(50% - var(--grid-gutter));
      }

      @media (min-width: tokens.$break-m) {
        flex: 1 0 calc(33.33% - var(--grid-gutter));
        max-width: calc(33.33% - var(--grid-gutter));
      }
    }
  }

  [data-component-grid-count='four'] & {
    > * {
      @media (min-width: tokens.$break-s) {
        flex: 0 calc(50% - var(--grid-gutter));
      }

      @media (min-width: tokens.$break-m) {
        flex: 1 0 calc(25% - var(--grid-gutter));
      }

      @media (min-width: tokens.$break-l) {
        flex: 1 0 calc(25% - var(--grid-gutter));
        max-width: calc(25% - var(--grid-gutter));
      }
    }
  }
}
