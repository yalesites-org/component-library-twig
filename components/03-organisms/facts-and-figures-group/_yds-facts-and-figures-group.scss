@use '../../00-tokens/tokens';
@use '../../00-tokens/functions/map';
@use '../../01-atoms/atoms';
@use '../grid-mixins' as grid;

$global-facts-and-figures-group-themes: map.deep-get(
  tokens.$tokens,
  'global-themes'
);
$facts-and-figures-group-component-themes: map.deep-get(
  tokens.$tokens,
  'component-themes'
);

.facts-and-figures__group {
  width: 100%;
  position: relative;
  padding-block-start: var(--size-spacing-10);
  padding-block-end: var(--size-spacing-10);

  // Or if the spotlight is the only spotlight on the page
  &[data-spotlights-position='first-and-last'] {
    @include tokens.spacing-page-section;
  }

  // We're using JavaScript to evaluate the last and first spotlights in a group of spotlights
  &[data-spotlights-position='first'] {
    margin-top: var(--size-spacing-10);
  }

  &[data-spotlights-position='last'] {
    margin-bottom: var(--size-spacing-10);
  }

  // Component themes defaults: iterate over each component theme to establish
  // default variables.
  @each $theme, $value in $facts-and-figures-group-component-themes {
    &[data-component-theme='#{$theme}'] {
      // prettier-ignore
      --color-slot-one: var(--component-themes-#{$theme}-slot-one);
      --color-slot-two: var(--component-themes-#{$theme}-slot-two);
      --color-slot-three: var(--component-themes-#{$theme}-slot-three);
      --color-slot-four: var(--component-themes-#{$theme}-slot-four);
      --color-slot-five: var(--component-themes-#{$theme}-slot-five);
      --color-slot-six: var(--component-themes-#{$theme}-slot-six);
      --color-slot-seven: var(--component-themes-#{$theme}-slot-seven);
      --color-slot-eight: var(--component-themes-#{$theme}-slot-eight);
      --color-facts-and-figures-theme: var(--color-slot-one);
      --color-facts-and-figures-content: var(--color-slot-eight);

      background-color: var(--color-facts-and-figures-theme);
      color: var(--color-facts-and-figures-content);

      .link,
      a,
      facts-and-figures__group_content {
        --color-text-shadow: var(--color-facts-and-figures-theme);
        --color-link-hover: var(--color-link-hover);
      }

      a:not([data-link-style]) {
        @include atoms.link;

        color: var(--color-link-base);

        &:hover {
          color: var(--color-facts-and-figures-content);
        }
      }
    }
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-facts-and-figures-group-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-slot-six: var(--global-themes-#{$globalTheme}-colors-slot-six);
      --color-slot-seven: var(
        --global-themes-#{$globalTheme}-colors-slot-seven
      );
      --color-slot-eight: var(
        --global-themes-#{$globalTheme}-colors-slot-eight
      );

      @if $globalTheme == 'four' {
        // Switch colors slot in order to have the selected background colors per component theme.
        --color-slot-two: var(--global-themes-four-colors-slot-five);
        --color-slot-five: var(--global-themes-four-colors-slot-two);
        // Set color slot for the text on light background.
        --color-slot-seven: var(--global-themes-four-colors-slot-six);
      }
    }
  }

  // Component theme overrides: set specific component themes overrides
  /// define component name spaced variables and map them to global theme slots.
  &[data-component-theme='one'] {
    --color-facts-and-figures-theme: var(--color-slot-one);
    --color-facts-and-figures-content: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);
    --color-link-base: var(--color-slot-eight);
    --color-link-hover: var(--color-slot-eight);
  }

  &[data-component-theme='two'] {
    --color-facts-and-figures-theme: var(--color-slot-four);
    --color-facts-and-figures-content: var(--color-slot-seven);
    --color-link-base: var(--color-slot-seven);
    --color-link-hover: var(--color-slot-seven);
  }

  &[data-component-theme='three'] {
    --color-facts-and-figures-theme: var(--color-slot-five);
    --color-facts-and-figures-content: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);
    --color-link-base: var(--color-slot-eight);
    --color-link-hover: var(--color-slot-eight);
  }

  &[data-component-theme='four'] {
    --color-facts-and-figures-theme: var(--color-slot-two);
    --color-facts-and-figures-content: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);

    [data-global-theme='four'] & {
      --color-facts-and-figures-theme: var(--component-themes-five-background);
      --color-facts-and-figures-content: var(--color-slot-seven);
    }
  }

  &[data-component-theme='five'] {
    --color-facts-and-figures-theme: var(--color-slot-three);
    --color-facts-and-figures-content: var(--color-slot-seven);
  }
}

.facts-and-figures__group__inner {
  width: 100%;
  max-width: var(--component-width);
}

.facts-and-figures__group__wrap {
  @include grid.base;

  // position relative added to use z-index and make sure the image is behind the content
  position: relative;
  z-index: 1;

  --grid-gutter: var(--spacing-component-gutter-secondary);

  > * {
    @media (min-width: tokens.$break-s) {
      flex: 0 1 calc(50% - calc(var(--grid-gutter) * 2 / 3));
    }

    @media (min-width: tokens.$break-m) {
      flex: 0 1 calc(33.33% - calc(var(--grid-gutter) * 2 / 3));
    }

    @media (min-width: tokens.$break-l) {
      flex: 0 1 calc(25% - calc(var(--grid-gutter) * 3 / 4));
    }
  }

  [data-component-grid-count='two'] & {
    > * {
      @media (min-width: tokens.$break-s) {
        flex: 0 1 calc(50% - var(--grid-gutter));
        max-width: calc(50% - var(--grid-gutter));
      }
    }
  }

  [data-component-grid-count='three'] & {
    > * {
      @media (min-width: tokens.$break-s) {
        flex: 0 calc(50% - var(--grid-gutter));
      }

      @media (min-width: tokens.$break-m) {
        flex: 1 0 calc(33.33% - var(--grid-gutter));
        max-width: calc(33.33% - var(--grid-gutter));
      }
    }
  }

  [data-component-grid-count='four'] & {
    > * {
      @media (min-width: tokens.$break-s) {
        flex: 0 calc(50% - var(--grid-gutter));
      }

      @media (min-width: tokens.$break-m) {
        flex: 1 0 calc(25% - var(--grid-gutter));
      }

      @media (min-width: tokens.$break-l) {
        flex: 1 0 calc(25% - var(--grid-gutter));
        max-width: calc(25% - var(--grid-gutter));
      }
    }
  }
}

.facts-and-figures__group__image {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-blend-mode: multiply;
  background-color: var(--color-facts-and-figures-theme);
  opacity: 0.15;

  img {
    height: 100%;
    width: 100%;
    object-fit: cover;
  }
}

.facts-and-figures__group__content-wrap {
  position: relative;
  z-index: 1;
  margin-bottom: var(--size-spacing-8);
}

.facts-and-figures__group__heading {
  @include tokens.h2-yale-new;

  color: var(--color-facts-and-figures-content);
}

.facts-and-figures__group__content {
  @include tokens.body-default;

  color: var(--color-facts-and-figures-content);
}

.facts-and-figures__group__cta {
  @include atoms.plain-link;

  color: var(--color-facts-and-figures-content);

  &:hover {
    color: var(--color-facts-and-figures-content);
  }
}
