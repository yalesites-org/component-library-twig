@use '../../../00-tokens/tokens';
@use '../../../00-tokens/functions/map';
@use '../../../01-atoms/atoms';
@use '../../grid-mixins' as grid;

$global-layout-themes: map.deep-get(tokens.$tokens, 'global-themes');
$layout-component-themes: map.deep-get(tokens.$tokens, 'component-themes');
$break-layout-layout: tokens.$break-2xl;
$break-layout-layout-max: $break-layout-layout - 0.05;

.yds-layout {
  --color-layout-border: var(--color-slot-one);

  // Component themes defaults: iterate over each component theme to establish
  // default variables.
  @each $theme, $value in $layout-component-themes {
    &[data-component-theme='#{$theme}'] {
      // prettier-ignore
      --color-slot-one: var(--component-themes-#{$theme}-slot-one);
      --color-slot-two: var(--component-themes-#{$theme}-slot-two);
      --color-slot-three: var(--component-themes-#{$theme}-slot-three);
      --color-slot-four: var(--component-themes-#{$theme}-slot-four);
      --color-slot-five: var(--component-themes-#{$theme}-slot-five);
      --color-slot-six: var(--component-themes-#{$theme}-slot-six);
      --color-slot-seven: var(--component-themes-#{$theme}-slot-seven);
      --color-slot-eight: var(--component-themes-#{$theme}-slot-eight);
      --color-layout-theme: var(--color-slot-one);
      --color-layout-content: var(--color-slot-eight);
      --color-layout-border: var(--color-slot-four);
      --color-link-base: var(--color-link-base);
      --color-link-hover: var(--color-link-hover);

      background-color: var(--color-layout-theme);
      color: var(--color-layout-content);

      // override text-shadow color for links in component themes
      .link,
      .text-field a,
      .link-grid__link {
        --color-text-shadow: var(--color-layout-theme);
        --color-link-hover: var(--color-link-hover);
        --color-link-base: var(--color-link-base);
      }
    }
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-layout-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-slot-six: var(--global-themes-#{$globalTheme}-colors-slot-six);
      --color-slot-seven: var(
        --global-themes-#{$globalTheme}-colors-slot-seven
      );
      --color-slot-eight: var(
        --global-themes-#{$globalTheme}-colors-slot-eight
      );

      @if $globalTheme == 'four' {
        // Switch colors slot in order to have the selected background colors per component theme.
        --color-slot-two: var(--global-themes-four-colors-slot-five);
        --color-slot-five: var(--global-themes-four-colors-slot-two);

        // Set color slot for the text on light background.
        --color-slot-seven: var(--global-themes-four-colors-slot-six);
      }
    }
  }

  // Component theme overrides: set specific component themes overrides
  /// define component name spaced variables and map them to global theme slots.
  &[data-component-theme='one'] {
    --color-layout-theme: var(--color-slot-one);
    --color-layout-content: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);
    --color-link-base: var(--color-slot-eight);
    --color-link-hover: var(--color-slot-eight);
    --color-layout-border: var(--color-slot-four);
    --color-heading: var(--color-slot-eight);
    --color-link-grid-action: var(--color-slot-eight);
  }

  &[data-component-theme='two'] {
    --color-layout-theme: var(--color-slot-four);
    --color-layout-content: var(--color-slot-seven);
    --color-link-base: var(--color-slot-seven);
    --color-link-hover: var(--color-slot-seven);
    --color-heading: var(--color-slot-six);
    --color-layout-border: var(--color-slot-six);
    --color-link-grid-action: var(--color-slot-six);
  }

  &[data-component-theme='three'] {
    --color-layout-theme: var(--color-slot-five);
    --color-layout-content: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);
    --color-link-base: var(--color-slot-eight);
    --color-link-hover: var(--color-slot-eight);
    --color-layout-border: var(--color-slot-four);
    --color-heading: var(--color-slot-eight);
    --color-link-grid-action: var(--color-slot-four);
  }

  &[data-component-theme='four'] {
    --color-layout-theme: var(--color-slot-two);
    --color-layout-content: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);
    --color-link-base: var(--color-slot-eight);
    --color-link-hover: var(--color-slot-eight);
    --color-layout-border: var(--color-slot-four);
    --color-heading: var(--color-slot-eight);
    --color-link-grid-action: var(--color-slot-four);
  }

  // if we're not using a component theme, add top and bottom margin
  // Or if the spotlight is the only spotlight on the page
  &[data-component-theme='default'],
  &[data-spotlights-position='first-and-last'] {
    @include tokens.spacing-page-section;
  }

  // We're using JavaScript to evaluate the last and first spotlights in a group of spotlights
  &[data-spotlights-position='first'] {
    margin-top: var(--size-spacing-10);
  }

  &[data-spotlights-position='last'] {
    margin-bottom: var(--size-spacing-10);
  }

  &[data-component-padding='no-top'],
  &[data-component-padding='no-padding'] {
    margin-top: 0;
  }

  &[data-component-padding='no-bottom'],
  &[data-component-padding='no-padding'] {
    margin-bottom: 0;
  }

  // Styles applied only if the HTML element has the 'yds-storybook-cl' class  html:has(.yds-storybook-cl) &,
  html:has(.yds-storybook-cl) & {
    margin-block: 0;
  }
}

.yds-layout__inner {
  padding-block-start: var(--size-spacing-10);
  padding-block-end: var(--size-spacing-10);

  [data-component-padding='no-top'] > &,
  [data-component-padding='no-padding'] > & {
    padding-block-start: 0;
  }

  [data-component-padding='no-bottom'] > &,
  [data-component-padding='no-padding'] > & {
    padding-block-end: 0;
  }

  @media (min-width: $break-layout-layout) {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: var(--spacing-page-inner);
  }

  // Flex sets `min-width` of children to `auto` by default... but this breaks
  // some of our base layout styles (causes horizontal scrolling), so we need to
  // reset it to `0`.
  > * {
    min-width: 0;

    // Then, some of our components that are intended to be "full-page-width"
    // will expand outside of the layout columns, so we need to set a max-width
    // on those to keep them contained within the section columns.
    > * {
      max-width: 100%;
    }
  }
}

.yds-layout__divider {
  display: flex;
  align-self: stretch;
  background-color: var(--color-layout-border);
  width: var(--border-thickness-2);
  opacity: 0.5;

  [data-component-padding='no-top'] &,
  [data-component-padding='no-padding'] & {
    margin-top: var(--spacing-page-inner);
  }

  [data-component-padding='no-bottom'] &,
  [data-component-padding='no-padding'] & {
    margin-bottom: var(--spacing-page-inner);
  }

  // gap affects the width of the divider, so we can increase the width of the
  // divider in this instance.
  [data-component-layout='seventy-thirty'] & {
    width: calc(var(--border-thickness-2) + var(--border-thickness-1));
  }

  @media (max-width: $break-layout-layout-max) {
    width: 100%;
    height: var(--border-thickness-2);
    margin-bottom: var(--spacing-page-inner);
  }
}

.yds-layout__primary {
  flex-flow: column nowrap;

  @media (max-width: $break-layout-layout-max) {
    margin-bottom: var(--spacing-page-inner);
  }

  [data-component-layout='fifty-fifty'] & {
    @media (min-width: $break-layout-layout) {
      flex: 0 1 calc(var(--size-component-layout-width-site) / 2);
    }
  }

  [data-component-layout='thirty-thirty-thirty'] & {
    @media (min-width: $break-layout-layout) {
      flex: 0 1 calc(var(--size-component-layout-width-site) / 3);
    }
  }

  [data-component-layout='seventy-thirty'] & {
    @media (min-width: $break-layout-layout) {
      flex: 1 0 var(--size-component-layout-width-content);
    }
  }
}

.yds-layout__secondary {
  display: flex;
  flex-flow: column nowrap;

  [data-component-layout='fifty-fifty'] & {
    @media (min-width: $break-layout-layout) {
      flex: 0 1 calc(var(--size-component-layout-width-site) / 2);
    }
  }

  [data-component-layout='thirty-thirty-thirty'] & {
    @media (min-width: $break-layout-layout) {
      flex: 0 1 calc(var(--size-component-layout-width-site) / 3);
    }
  }

  [data-component-layout='seventy-thirty'] & {
    @media (min-width: $break-layout-layout) {
      flex: 0 1 calc(37.5rem + var(--spacing-component-gutter));
    }
  }
}

.yds-layout__tertiary {
  display: flex;
  flex-flow: column nowrap;

  [data-component-layout='thirty-thirty-thirty'] & {
    @media (min-width: $break-layout-layout) {
      flex: 0 1 calc(var(--size-component-layout-width-site) / 3);
    }
  }
}

// Update font-size for headings based on layout
h2 {
  [data-component-layout='seventy-thirty'] &,
  [data-component-layout='thirty-thirty-thirty'] & {
    @include tokens.heading(h3);
  }
}

h3 {
  [data-component-layout='seventy-thirty'] &,
  [data-component-layout='thirty-thirty-thirty'] & {
    @include tokens.heading(h4);
  }
}

h4 {
  [data-component-layout='seventy-thirty'] &,
  [data-component-layout='thirty-thirty-thirty'] & {
    @include tokens.heading(h5);
  }
}
