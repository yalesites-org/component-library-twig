@use '../../00-tokens/tokens';
@use '../../00-tokens/functions/map';
@use '../../01-atoms/atoms';
@use '../grid-mixins' as grid;

$global-stats-group-themes: map.deep-get(tokens.$tokens, 'global-themes');
$stats-group-component-themes: map.deep-get(tokens.$tokens, 'component-themes');

.stats {
  @include tokens.spacing-page-section($banner-spacing: true);

  padding-block: var(--size-spacing-11);
  width: 100%;
  position: relative;

  // Component themes defaults: iterate over each component theme to establish
  // default variables.
  @each $theme, $value in $stats-group-component-themes {
    &[data-component-theme='#{$theme}'] {
      // prettier-ignore
      --color-slot-one: var(--component-themes-#{$theme}-slot-one);
      --color-slot-two: var(--component-themes-#{$theme}-slot-two);
      --color-slot-three: var(--component-themes-#{$theme}-slot-three);
      --color-slot-four: var(--component-themes-#{$theme}-slot-four);
      --color-slot-five: var(--component-themes-#{$theme}-slot-five);
      --color-slot-six: var(--component-themes-#{$theme}-slot-six);
      --color-slot-seven: var(--component-themes-#{$theme}-slot-seven);
      --color-slot-eight: var(--component-themes-#{$theme}-slot-eight);
      --color-stats-theme: var(--color-slot-one);
      --color-stats-content: var(--color-slot-eight);

      background-color: var(--color-stats-theme);
      color: var(--color-stats-content);
    }
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-stats-group-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-slot-six: var(--global-themes-#{$globalTheme}-colors-slot-six);
      --color-slot-seven: var(
        --global-themes-#{$globalTheme}-colors-slot-seven
      );
      --color-slot-eight: var(
        --global-themes-#{$globalTheme}-colors-slot-eight
      );
    }
  }

  // Component theme overrides: set specific component themes overrides
  /// define component name spaced variables and map them to global theme slots.
  &[data-component-theme='one'] {
    --color-stats-theme: var(--color-slot-one);
    --color-stats-content: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);
  }

  &[data-component-theme='two'] {
    --color-stats-theme: var(--color-slot-four);
    --color-stats-content: var(--color-slot-seven);
  }

  &[data-component-theme='three'] {
    --color-stats-theme: var(--color-slot-five);
    --color-stats-content: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);
  }
}

.stats__inner {
  width: 100%;
  max-width: var(--component-width);
}

.stats__wrap {
  @include grid.base;

  // position relative added to use z-index and make sure the image is behind the content
  position: relative;
  z-index: 1;

  --grid-gutter: var(--spacing-component-gutter-secondary);

  > * {
    @media (min-width: tokens.$break-s) {
      flex: 0 1 calc(50% - calc(var(--grid-gutter) * 2 / 3));
    }

    @media (min-width: tokens.$break-m) {
      flex: 0 1 calc(33.33% - calc(var(--grid-gutter) * 2 / 3));
    }

    @media (min-width: tokens.$break-l) {
      flex: 0 1 calc(25% - calc(var(--grid-gutter) * 3 / 4));
    }
  }
}
