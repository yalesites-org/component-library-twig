@use '../../00-tokens/tokens';
@use '../../01-atoms/atoms';
@use '../../00-tokens/functions/map';
@use '../../01-atoms/controls/text-link/yds-text-link' as link;

$global-wrapped-callout-themes: map.deep-get(tokens.$tokens, 'global-themes');
$wrapped-callout-component-themes: map.deep-get(
  tokens.$tokens,
  'component-themes'
);

.wrapped-callout {
  // Component themes defaults: iterate over each component theme to establish
  // default variables.
  @each $theme, $value in $wrapped-callout-component-themes {
    &[data-component-theme='#{$theme}'] {
      // prettier-ignore
      --color-slot-one: var(--component-themes-#{$theme}-slot-one);
      --color-slot-two: var(--component-themes-#{$theme}-slot-two);
      --color-slot-three: var(--component-themes-#{$theme}-slot-three);
      --color-slot-four: var(--component-themes-#{$theme}-slot-four);
      --color-slot-five: var(--component-themes-#{$theme}-slot-five);
      --color-slot-six: var(--component-themes-#{$theme}-slot-six);
      --color-slot-seven: var(--component-themes-#{$theme}-slot-seven);
      --color-slot-eight: var(--component-themes-#{$theme}-slot-eight);
      --color-wrapped-callout-theme: var(--color-slot-one);

      border-color: var(--color-wrapped-callout-theme);
    }
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-wrapped-callout-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-slot-six: var(--global-themes-#{$globalTheme}-colors-slot-six);
      --color-slot-seven: var(
        --global-themes-#{$globalTheme}-colors-slot-seven
      );
      --color-slot-eight: var(
        --global-themes-#{$globalTheme}-colors-slot-eight
      );
      --color-heading: var(--color-slot-seven);
    }
  }

  // Component theme overrides: set specific component themes overrides
  /// define component name spaced variables and map them to global theme slots.
  &[data-component-theme='one'] {
    --color-wrapped-callout-theme: var(--color-slot-one);
  }

  &[data-component-theme='two'] {
    --color-wrapped-callout-theme: var(--color-slot-two);
  }

  &[data-component-theme='three'] {
    --color-wrapped-callout-theme: var(--color-slot-three);
  }

  &[data-component-theme='four'] {
    --color-wrapped-callout-theme: var(--color-slot-four);
  }

  &[data-component-theme='five'] {
    --color-wrapped-callout-theme: var(--color-slot-five);
  }
}

.wrapped-callout__content-wrapper {
  max-width: var(--size-component-layout-width-content);
}

.wrapped-callout__callout {
  width: 100%;
  max-width: 100%;
  padding: var(--size-spacing-8) var(--size-spacing-6);
  border: var(--border-thickness-2) solid var(--color-wrapped-callout-theme);

  // if callout has left/right alignment and the wrapped callout has content, limit the width of the callout
  @media (min-width: tokens.$break-l) {
    [data-wrapped-callout-alignment='left']:has(.wrapped-callout__content) & {
      max-width: 35%;
      float: left;
      margin-right: 3%;
      margin-bottom: 2%;
    }

    [data-wrapped-callout-alignment='right']:has(.wrapped-callout__content) & {
      max-width: 35%;
      float: right;
      margin-left: 3%;
      margin-bottom: 2%;
    }
  }

  h2 {
    @include tokens.h4-yale-new;
  }

  a {
    @include link.plain-link;
  }
}
