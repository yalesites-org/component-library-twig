@use '../../../00-tokens/tokens';
@use '../../../01-atoms/atoms';
@use '../../../00-tokens/functions/map';

// get global themes
$global-banner-themes: map.deep-get(tokens.$tokens, 'global-themes');
$component-banner-themes: map.deep-get(tokens.$tokens, 'component-themes');
$break-image-banner: tokens.$break-l;
$break-image-banner-max: $break-image-banner - 0.05;

.image-banner {
  @include tokens.spacing-page-section(
    $flush-top: true,
    $flush-bottom: true,
    $banner-spacing: true
  );

  // Component themes defaults: iterate over each component theme to establish
  // default variables.
  @each $theme, $value in $component-banner-themes {
    &[data-component-theme='#{$theme}'] {
      --color-backgound: var(--color-banner-background);
      --color-slot-one: var(--component-themes-#{$theme}-slot-one);
      --color-slot-two: var(--component-themes-#{$theme}-slot-two);
      --color-slot-three: var(--component-themes-#{$theme}-slot-three);
      --color-slot-four: var(--component-themes-#{$theme}-slot-four);
      --color-slot-five: var(--component-themes-#{$theme}-slot-five);
      --color-slot-six: var(--component-themes-#{$theme}-slot-six);
      --color-slot-seven: var(--component-themes-#{$theme}-slot-seven);
      --color-slot-eight: var(--component-themes-#{$theme}-slot-eight);
    }
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-banner-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-slot-six: var(--global-themes-#{$globalTheme}-colors-slot-six);
      --color-slot-seven: var(
        --global-themes-#{$globalTheme}-colors-slot-seven
      );
      --color-slot-eight: var(
        --global-themes-#{$globalTheme}-colors-slot-eight
      );
    }
  }

  max-width: tokens.$break-max-width;
  margin-inline-start: auto;
  margin-inline-end: auto;
  padding: 0;
  background-color: var(--color-banner-background);

  --banner-content-max-width: 37rem;

  // Component theme overrides: set specific component themes overrides
  /// define component name spaced variables and map them to global theme slots.
  &[data-component-theme='one'] {
    --color-banner-background: var(--color-slot-one);
  }

  &[data-component-theme='two'] {
    --color-banner-background: var(--color-slot-four);
  }

  &[data-component-theme='three'] {
    --color-banner-background: var(--color-slot-five);
  }
}

.image-banner__content-wrapper {
  position: relative;

  @media (min-width: $break-image-banner) {
    aspect-ratio: 16 / 5;

    // Safari 14 fix for aspect-ratio
    @supports not (aspect-ratio: 16 / 5) {
      &::before {
        float: left;
        padding-top: 26.25%;
        content: '';
      }

      &::after {
        display: block;
        content: '';
        clear: both;
      }
    }
  }
}

.image-banner__image {
  @media (max-width: ($break-image-banner - 0.05)) {
    aspect-ratio: 16 / 5;

    // Safari 14 fix for aspect-ratio
    @supports not (aspect-ratio: 16 / 5) {
      &::before {
        float: left;
        padding-top: 26.25%;
        content: '';
      }

      &::after {
        display: block;
        content: '';
        clear: both;
      }
    }
  }

  @media (min-width: $break-image-banner) {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }

  img {
    object-fit: cover;
    height: 100%;
    width: 100%;
  }
}

.image-banner__outer-wrap {
  width: 100%;

  [data-banner-content-layout='left'] &,
  [data-banner-content-layout='right'] & {
    @media (min-width: $break-image-banner) {
      max-width: var(--banner-content-max-width);
    }
  }
}

.image-banner__wrap {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  height: 100%;

  // prettier-ignore
  padding: var(--size-spacing-6) var(--size-spacing-7) var(--size-spacing-7);

  [data-banner-content-layout='left'] &,
  [data-banner-content-layout='right'] & {
    width: 100%;
    max-width: var(--size-component-layout-width-content);
  }

  [data-banner-content-layout='bottom'] & {
    @media (min-width: $break-image-banner) {
      gap: var(--size-spacing-5);
      flex-basis: 100%;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      padding-block-start: var(--size-spacing-5);
      padding-block-end: var(--size-spacing-5);
      min-height: auto;
      width: 100%;
      max-width: 108rem; // 1728px
      margin: 0 auto;
    }
  }

  @media (min-width: $break-image-banner) {
    padding: var(--size-spacing-6) var(--size-spacing-site-gutter)
      var(--size-spacing-7);
  }

  [data-banner-width='site'] & {
    // prettier-ignore
    max-width: calc(var(--size-component-layout-width-site) + (var(--size-spacing-10)));

    @media (min-width: $break-image-banner) {
      // prettier-ignore
      max-width: calc(var(--size-component-layout-width-site) + (var(--size-spacing-site-gutter) * 2));
      margin: 0 auto;
    }
  }
}
