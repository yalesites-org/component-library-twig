@use '~@yalesites-org/tokens/build/scss/tokens' as sass-tokens;
@use '../../00-tokens/functions/map';
@use '../../00-tokens/tokens';
@use '../../01-atoms/atoms';

$alert-themes: map.deep-get(sass-tokens.$tokens, color, alert);
$alert-fade-speed: var(--animation-speed-slow);

.alert {
  --size-icon: 1.25rem;
  --color-link-base: currentcolor;
  --color-link-hover: currentcolor;

  position: relative;
  z-index: 3;
  background-color: var(--color-alert-background);
  color: var(--color-alert-text);
  max-height: 25rem; // we need to set a max-height to animate the alert close state.
  opacity: 1;
  overflow: hidden;

  @each $theme, $value in $alert-themes {
    &[data-alert-type='#{$theme}'] {
      --color-alert-background: var(--color-alert-#{$theme}-background-color);
      --color-alert-text: var(--color-alert-#{$theme}-text);
      --color-alert-border: var(--color-alert-#{$theme}-border-color);
      --color-text-shadow: var(--color-alert-#{$theme}-background-color);
    }
  }

  &[data-alert-state='dismissed'] {
    &.alert__animate {
      @include tokens.animate($duration: $alert-fade-speed);
    }

    visibility: hidden;
    opacity: 0;
    max-height: 0;
  }
}

.alert__inner {
  display: flex;
  align-items: flex-start;
  padding-block-start: var(--size-spacing-5);
  padding-block-end: var(--size-spacing-5);

  @media (min-width: tokens.$break-mobile) {
    align-items: center;
  }
}

.alert__icon {
  display: flex;
  margin-right: var(--size-spacing-3);
  flex: 0 0 var(--size-icon);

  @media (max-width: tokens.$break-mobile-max) {
    padding-top: var(--size-spacing-1);
  }

  @media (min-width: tokens.$break-mobile) {
    margin-right: var(--size-spacing-5);

    [data-alert-state='expanded'] &,
    // fix icon alignment shift
    [data-alert-state='dismissed'] & {
      align-self: flex-start;
    }
  }

  svg {
    height: var(--size-icon);
    width: var(--size-icon);

    @media (min-width: tokens.$break-mobile) {
      [data-alert-state='collapsed'] & {
        --size-icon: 1.5625rem;
      }

      [data-alert-state='expanded'] &,
      // fix icon resize when dismissed
      [data-alert-state='dismissed'] & {
        --size-icon: 2.125rem;
      }
    }
  }
}

.alert__content {
  flex: 1 1 auto;
  display: flex;
  flex-wrap: wrap;
  padding-right: var(--size-spacing-3);

  @media (max-width: tokens.$break-mobile-max) {
    gap: var(--size-spacing-3);
    flex-direction: column;
    align-items: flex-start;
  }

  @media (min-width: tokens.$break-mobile) {
    gap: var(--size-spacing-5);
    justify-content: space-between;
    align-items: center;
    padding-right: var(--size-spacing-7);
    border-right: var(--border-thickness-1) solid var(--color-alert-border);

    [data-alert-state='collapsed'] & {
      border: none;
    }
  }
}

.alert__heading {
  @include tokens.h5-mallory-compact-medium;

  color: inherit;
}

.alert__text {
  @include tokens.body-s-condensed;

  margin-top: var(--size-spacing-2);
  max-width: var(--size-component-layout-width-content);

  [data-alert-state='collapsed'] & {
    display: none;
  }

  > *:last-child {
    margin-bottom: 0;
  }
}

.alert__link {
  @include atoms.link;
  @include tokens.body-s;

  --position: 0 1.3em;

  margin-bottom: var(--size-spacing-2);

  [data-alert-state='collapsed'] & {
    display: none;
  }

  &:visited {
    color: var(--color-alert-text);
  }

  &:has(> i.fa-icon) {
    padding-right: var(--size-spacing-3);
  }
}

.alert__toggle {
  @include atoms.button-reset;

  --size-icon: 1.25rem;

  flex: 0 0 var(--size-icon);
  display: flex;
  transform: rotate(180deg);

  [data-alert-state='collapsed'] & {
    transform: rotate(0deg);
  }

  @media (min-width: tokens.$break-mobile) {
    --size-icon: 1.5625rem;

    padding: var(--size-spacing-3);
    margin-left: var(--size-spacing-5);
  }

  svg {
    height: var(--size-icon);
    width: var(--size-icon);
  }
}
