@use '../../00-tokens/tokens';
@use '../../01-atoms/atoms';
@use '../../00-tokens/functions/map';

// get global themes
$global-taxonomy-display-port-themes: map.deep-get(
  tokens.$tokens,
  'global-themes'
);
$component-taxonomy-display-port-themes: map.deep-get(
  tokens.$tokens,
  'component-themes'
);

// Taxonomy Display
.taxonomy-display {
  // used by a element for animated hover underline
  --color-text-shadow: var(--color-basic-white);

  // if we're not using a component theme, add top and bottom margin
  // Or if the spotlight is the only spotlight on the page
  &[data-component-theme='default'] {
    padding-block: var(--size-spacing-6);
    background-color: var(--color-gray-100);
  }

  // If we're using a component theme, add padding and set background-color and color;
  &:not([data-component-theme='default']) {
    padding-block: var(--size-spacing-6);
    background-color: var(--color-background);
    color: var(--color-text);
  }

  // Component themes defaults: iterate over each component theme to establish
  // default variables.
  @each $theme, $value in $component-taxonomy-display-port-themes {
    &[data-component-theme='#{$theme}'] {
      --color-slot-one: var(--component-themes-#{$theme}-slot-one);
      --color-slot-two: var(--component-themes-#{$theme}-slot-two);
      --color-slot-three: var(--component-themes-#{$theme}-slot-three);
      --color-slot-four: var(--component-themes-#{$theme}-slot-four);
      --color-slot-five: var(--component-themes-#{$theme}-slot-five);
      --color-slot-six: var(--component-themes-#{$theme}-slot-six);
      --color-slot-seven: var(--component-themes-#{$theme}-slot-seven);
      --color-slot-eight: var(--component-themes-#{$theme}-slot-eight);
      --color-spotlight-text-shadow: var(--color-background);

      // override text-shadow color for links in component themes
      .taxonomy-display__link {
        --color-text-shadow: var(--color-spotlight-text-shadow);
        --color-link-hover: var(--color-link-hover);
      }
    }
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-taxonomy-display-port-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-slot-six: var(--global-themes-#{$globalTheme}-colors-slot-six);
      --color-slot-seven: var(
        --global-themes-#{$globalTheme}-colors-slot-seven
      );
      --color-slot-eight: var(
        --global-themes-#{$globalTheme}-colors-slot-eight
      );

      @if $globalTheme == 'four' {
        // Switch colors slot in order to have the selected background colors per component theme.
        --color-slot-two: var(--global-themes-four-colors-slot-five);
        --color-slot-five: var(--global-themes-four-colors-slot-two);

        // Set color slot for the text on light background.
        --color-slot-seven: var(--global-themes-four-colors-slot-six);
      }
    }
  }

  // Component theme overrides: set specific component themes overrides
  /// define component name spaced variables and map them to global theme slots.
  &[data-component-theme='one'] {
    --color-background: var(--color-slot-one);
    --color-text: var(--color-slot-eight);
    --color-link-base: var(--color-slot-eight);
    --color-link-hover: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);
  }

  &[data-component-theme='two'] {
    --color-background: var(--color-slot-four);
    --color-text: var(--color-slot-seven);
    --color-link-base: var(--color-slot-seven);
    --color-link-hover: var(--color-slot-seven);
  }

  &[data-component-theme='three'] {
    --color-background: var(--color-slot-five);
    --color-text: var(--color-slot-eight);
    --color-link-base: var(--color-slot-eight);
    --color-link-hover: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);

    // For accessibility reason set lighter visited links color.
    [data-global-theme='four'] & {
      --color-link-visited-base: var(--color-gray-100);
      --color-link-visited-hover: var(--color-slot-eight);
    }
  }

  &[data-component-theme='four'] {
    --color-background: var(--color-slot-three);
    --color-text: var(--color-slot-seven);
    --color-link-base: var(--color-slot-seven);
    --color-link-hover: var(--color-slot-seven);
  }

  &[data-component-theme='five'] {
    --color-background: var(--color-slot-two);
    --color-text: var(--color-slot-eight);
    --color-link-base: var(--color-slot-eight);
    --color-link-hover: var(--color-slot-eight);
    --color-link-visited-base: var(--color-link-visited-light);
    --color-link-visited-hover: var(--color-link-visited-light-hover);

    [data-global-theme='four'] & {
      --color-background: var(--component-themes-five-background);
      --color-text: var(--component-themes-five-text);
      --color-link-base: var(--color-slot-one);
      --color-link-hover: var(--color-slot-one);
      --color-link-visited-base: var(--color-purple-visited);
      --color-link-visited-hover: var(--color-purple-visited-hover);
    }
  }

  .page-meta + .layout &:first-child {
    margin-block-start: var(--spacing-page-section);
  }
}

.taxonomy-display__inner {
  display: flex;
  flex-flow: column nowrap;
}

.taxonomy-display__content {
  @media (max-width: tokens.$break-mobile-max) {
    order: 1;
  }

  @media (min-width: tokens.$break-mobile) {
    width: 100%;
    max-width: 80%;
  }

  > *:not(:last-child) {
    margin-bottom: var(--size-spacing-5);
  }
}

.taxonomy-display__list {
  @include atoms.list-reset;

  display: inline-flex;
  flex-wrap: wrap;
  column-gap: var(--size-spacing-8);
  row-gap: var(--size-spacing-6);

  @media (max-width: tokens.$break-mobile) {
    column-gap: var(--size-spacing-6);
    row-gap: var(--size-spacing-4);
  }
}

.taxonomy-display__item {
  display: inline-flex;
  gap: var(--size-spacing-5);
  align-items: center;

  .taxonomy-display__item & {
    display: initial;

    &:not(:last-child)::after {
      content: ',';
    }
  }
}

.taxonomy-display__item__label {
  text-transform: uppercase;
  font-weight: var(--font-weights-yalenew-bold);
  font-family: var(--font-families-mallory);
  font-size: var(--font-size-14);

  &::after {
    content: ':';
  }
}

.taxonomy-display__item__list {
  @include atoms.list-reset;

  padding: 0;
  margin: 0;
  display: inline-flex;
  align-items: center;
  flex-wrap: wrap;
  gap: var(--size-spacing-3);
  padding-bottom: var(--size-spacing-3);

  &:has(.taxonomy-display__item__label) {
    padding-bottom: 0;
  }

  & .taxonomy-display__item__label {
    font-weight: inherit;

    &::after {
      content: '';
    }
  }
}

.taxonomy-display__link {
  @include atoms.link;

  font-size: var(--font-size-15);
  font-weight: var(--font-weights-mallory-book);
  color: var(--color-link-base);
}
