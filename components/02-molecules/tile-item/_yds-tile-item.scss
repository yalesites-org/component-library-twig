@use '../../00-tokens/tokens';
@use '../../00-tokens/functions/map';
@use '../../01-atoms/atoms';

$global-tile-item-themes: map.deep-get(tokens.$tokens, 'global-themes');
$tile-item-component-themes: map.deep-get(tokens.$tokens, 'component-themes');

.tile__item {
  display: flex;
  flex-flow: column nowrap;
  justify-content: flex-start;
  position: relative;
  width: 100%;
  max-width: 100%;
  z-index: 0;

  @media (min-width: tokens.$break-l) {
    aspect-ratio: 3/2;
  }

  [data-component-grid-count='two'] & {
    @media (min-width: tokens.$break-l) {
      aspect-ratio: 4 / 2;
    }
  }

  // if in a 4-column grid, make the aspect ratio 1:1
  [data-component-grid-count='four'] & {
    @media (min-width: tokens.$break-s) {
      aspect-ratio: 1 / 1;
    }
  }

  // Component themes defaults: iterate over each component theme to establish
  // default variables.
  @each $theme, $value in $tile-item-component-themes {
    &[data-component-theme='#{$theme}'] {
      // prettier-ignore
      --color-slot-one: var(--component-themes-#{$theme}-slot-one);
      --color-slot-two: var(--component-themes-#{$theme}-slot-two);
      --color-slot-three: var(--component-themes-#{$theme}-slot-three);
      --color-slot-four: var(--component-themes-#{$theme}-slot-four);
      --color-slot-five: var(--component-themes-#{$theme}-slot-five);
      --color-slot-six: var(--component-themes-#{$theme}-slot-six);
      --color-slot-seven: var(--component-themes-#{$theme}-slot-seven);
      --color-slot-eight: var(--component-themes-#{$theme}-slot-eight);
      --color-tile-item-theme: var(--color-slot-one);
      --color-tile-item-content: var(--color-slot-eight);
      --color-link-base: var(--color-tile-item-content);
      --color-link-hover: var(--color-tile-item-content);
      --color-link-visited-base: var(--color-link-visited-light);
      --color-link-visited-hover: var(--color-link-visited-light-hover);

      background-color: var(--color-tile-item-theme);
      color: var(--color-tile-item-content);
    }
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-tile-item-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-slot-six: var(--global-themes-#{$globalTheme}-colors-slot-six);
      --color-slot-seven: var(
        --global-themes-#{$globalTheme}-colors-slot-seven
      );
      --color-slot-eight: var(
        --global-themes-#{$globalTheme}-colors-slot-eight
      );
    }
  }

  // Component theme overrides: set specific component themes overrides
  /// define component name spaced variables and map them to global theme slots.
  &[data-component-theme='one'] {
    --color-tile-item-theme: var(--color-slot-one);
    --color-tile-item-content: var(--color-slot-eight);
  }

  &[data-component-theme='two'] {
    --color-tile-item-theme: var(--color-slot-two);
    --color-tile-item-content: var(--color-slot-eight);
  }

  &[data-component-theme='three'] {
    --color-tile-item-theme: var(--color-slot-three);
    --color-tile-item-content: var(--color-slot-seven);
  }

  &__inner {
    display: flex;
    flex-flow: column nowrap;
    padding: var(--size-spacing-8) var(--size-spacing-6);
    height: 100%;
    align-items: flex-start;

    // if the tile item is a link, make the whole tile item clickable
    [data-component-linked-tile='true'] & {
      @include atoms.clickable-component-image;
    }

    [data-component-alignment='right'] & {
      align-items: flex-end;
    }

    [data-component-tile-style='text-only'][data-component-vertical-alignment='bottom']
      & {
      justify-content: flex-end;
    }
  }
}

.tile__item__number {
  @include tokens.h1-yale-new;

  position: relative;
  flex: 0 auto;

  [data-component-vertical-alignment='bottom'] & {
    flex: 1 auto;
  }
}

.tile__item__icon {
  margin-bottom: var(--size-spacing-2);
  flex: 0 auto;

  [data-component-vertical-alignment='bottom'] & {
    flex: 1 auto;
  }
}

// svg
.tile__item__tile__item-icon {
  max-width: var(--size-spacing-9); // max-width 48px
  max-height: var(--size-spacing-9); // max-height 48px
  fill: var(--color-tile-item-content);
}

.tile__item__content {
  @include tokens.h4-yale-new;

  flex: 1 auto;
  text-align: left;

  [data-component-vertical-alignment='bottom'] & {
    flex: 0 auto;
  }

  [data-component-alignment='right'] & {
    text-align: right;
  }
}

.tile__item__image {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
  z-index: -1;

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background-color: var(--color-tile-item-theme);
    opacity: 0.85;

    .tile__item[data-component-linked-tile='true']:hover & {
      opacity: 0.95;
    }
  }
}

.tile__item__link {
  @include atoms.plain-link;
  @include tokens.h4-yale-new;

  &:hover {
    color: var(--color-tile-item-content);
  }

  // when hovering over the tile item, remove the underline on the link
  .tile__item:hover & {
    text-decoration: none;
  }
}

.tile__item:hover .tile__item__link:visited {
  color: var(--color-link-visited-hover);
}
