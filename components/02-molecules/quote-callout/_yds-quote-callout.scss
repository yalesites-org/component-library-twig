@use '../../00-tokens/tokens';
@use '../../00-tokens/functions/map';

$global-quote-callout-themes: map.deep-get(tokens.$tokens, 'global-themes');
$quote-callout-component-themes: map.deep-get(
  tokens.$tokens,
  'component-themes'
);

blockquote {
  margin: 0;
}

.quote-callout {
  --color-quote-callout-quote: var(--color-gray-800);
  --color-quote-callout-attribution: var(--color-basic-brown-gray);

  padding-block-start: var(--size-spacing-10);
  padding-block-end: var(--size-spacing-10);

  // Or if the spotlight is the only spotlight on the page
  &[data-spotlights-position='first-and-last'] {
    @include tokens.spacing-page-section;
  }

  // We're using JavaScript to evaluate the last and first spotlights in a group of spotlights
  &[data-spotlights-position='first'] {
    margin-top: var(--size-spacing-10);
  }

  &[data-spotlights-position='last'] {
    margin-bottom: var(--size-spacing-10);
  }

  // if animation is active
  [data-site-animation='artistic'] & {
    &[data-animate-item='enabled'] {
      @include tokens.animate(
        $property: 'transform',
        $duration: var(--animation-speed-slow)
      );
      @include tokens.fade-in-up;
    }
  }

  // Component themes defaults: iterate over each component theme to establish
  // default variables.
  @each $theme, $value in $quote-callout-component-themes {
    &[data-component-theme='#{$theme}'] {
      // prettier-ignore
      --color-slot-one: var(--component-themes-#{$theme}-slot-one);
      --color-slot-two: var(--component-themes-#{$theme}-slot-two);
      --color-slot-three: var(--component-themes-#{$theme}-slot-three);
      --color-slot-four: var(--component-themes-#{$theme}-slot-four);
      --color-slot-five: var(--component-themes-#{$theme}-slot-five);
      --color-slot-six: var(--component-themes-#{$theme}-slot-six);
      --color-slot-seven: var(--component-themes-#{$theme}-slot-seven);
      --color-slot-eight: var(--component-themes-#{$theme}-slot-eight);
      --color-quote-callout-accent: var(--color-quote-callout-accent);
      --color-quote-callout-background: var(--color-quote-callout-background);

      background-color: var(--color-quote-callout-background);
    }
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-quote-callout-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-slot-six: var(--global-themes-#{$globalTheme}-colors-slot-six);
      --color-slot-seven: var(
        --global-themes-#{$globalTheme}-colors-slot-seven
      );
      --color-slot-eight: var(
        --global-themes-#{$globalTheme}-colors-slot-eight
      );
    }
  }

  // Component theme overrides: set specific component themes overrides
  /// define component name spaced variables and map them to global theme slots.
  &[data-component-theme='one'] {
    --color-quote-callout-background: var(--color-slot-one);
    --color-quote-callout-accent: var(--color-slot-eight);
    --color-quote-callout-quote: var(--color-slot-eight);
    --color-quote-callout-attribution: var(--color-slot-eight);
  }

  &[data-component-theme='two'] {
    --color-quote-callout-background: var(--color-slot-three);
    --color-quote-callout-accent: var(--color-slot-seven);
    --color-quote-callout-quote: var(--color-slot-seven);
    --color-quote-callout-attribution: var(--color-slot-seven);
  }

  &[data-component-theme='three'] {
    --color-quote-callout-background: var(--color-slot-five);
    --color-quote-callout-accent: var(--color-slot-eight);
    --color-quote-callout-quote: var(--color-slot-eight);
    --color-quote-callout-attribution: var(--color-slot-eight);
  }
}

.quote-callout__figure {
  --quote-callout-border-height: 100%;

  @media (min-width: tokens.$break-mobile) {
    max-width: calc(var(--size-component-layout-width-content) - 11rem);
  }

  // with image
  [data-quote-callout-style='image'] & {
    flex: 1 0 calc(70% - var(--size-spacing-8));
  }

  [data-quote-callout-style='bar'][data-quote-callout-quote-alignment='left']
    & {
    position: relative;
    padding-left: var(--size-spacing-6);

    @media (min-width: tokens.$break-mobile) {
      margin-left: var(--size-spacing-7);
    }

    &::before {
      content: '';
      position: absolute;
      left: calc(var(--border-thickness-4) * -1);
      bottom: 0;
      height: var(--quote-callout-border-height);
      width: var(--border-thickness-4);
      background-color: var(--color-quote-callout-accent);
    }
  }

  [data-quote-callout-style='bar'][data-quote-callout-quote-alignment='right']
    & {
    position: relative;
    padding-right: var(--size-spacing-6);
    text-align: right;

    @media (min-width: tokens.$break-mobile) {
      margin-left: calc(var(--size-spacing-13) - 1rem);
    }

    &::before {
      content: '';
      position: absolute;
      right: calc(var(--border-thickness-4) * -1);
      bottom: 0;
      height: var(--quote-callout-border-height);
      width: var(--border-thickness-4);
      background-color: var(--color-quote-callout-accent);
    }
  }

  [data-quote-callout-style='quote'][data-quote-callout-quote-alignment='left']
    & {
    position: relative;
    padding-left: var(--size-spacing-8);

    &::before {
      content: '“';
      font-family: var(--font-families-yalenew);
      position: absolute;
      top: 0;
      left: 0;
      font-size: var(--size-spacing-11);
      line-height: 1;
      color: var(--color-quote-callout-accent);
    }

    @media (min-width: tokens.$break-mobile) {
      margin-left: var(--size-spacing-6);
    }
  }

  [data-quote-callout-style='quote'][data-quote-callout-quote-alignment='right']
    & {
    position: relative;
    padding-left: var(--size-spacing-8);
    text-align: right;

    @media (min-width: tokens.$break-mobile) {
      margin-left: calc(var(--size-spacing-13) - 1rem);
    }

    &::before {
      content: '“';
      font-family: var(--font-families-yalenew);
      position: absolute;
      top: 0;
      left: 0;
      font-size: var(--size-spacing-11);
      line-height: 1;
      color: var(--color-quote-callout-accent);
    }
  }

  // if animation is active, animate bar variation
  // prettier-ignore
  [data-site-animation='artistic'] [data-quote-callout-style='bar'][data-quote-callout-quote-alignment='left'][data-animate-item='true'] &,
  [data-site-animation='artistic'] [data-quote-callout-style='bar'][data-quote-callout-quote-alignment='right'][data-animate-item='true'] & {
    @include tokens.animate($duration: var(--animation-speed-default));

    --quote-callout-border-height: 0;

    &::before {
      --animation-speed-mid-slow: 400ms;

      height: var(--quote-callout-border-height);

      @include tokens.animate(
        $property: height,
        $duration: var(--animation-speed-mid-slow),
        $delay: 400ms
      );
    }
  }

  // when the animate class is added, animate the quote bar height.
  // prettier-ignore
  [data-site-animation='artistic'] [data-quote-callout-style='bar'][data-animate-item='true'].animate & {
    --quote-callout-border-height: 100%;

    &::before {      
      @include tokens.expand-height(--quote-callout-border-height);
    }
  }
}

.quote-callout__inner {
  // image variaton
  [data-quote-callout-style='image'] & {
    display: flex;
    flex-flow: column nowrap;
    gap: var(--size-spacing-8);

    @media (min-width: tokens.$break-mobile) {
      flex-flow: row wrap;
    }
  }

  [data-quote-callout-style='image'][data-quote-callout-quote-alignment='right']
    & {
    @media (min-width: tokens.$break-mobile) {
      flex-direction: row-reverse;
    }
  }

  @media (max-width: tokens.$break-mobile-max) {
    padding-inline-start: var(--size-spacing-6);
    padding-inline-end: var(--size-spacing-6);
  }
}

.quote-callout__quote {
  font: var(--font-style-body-xl);
  color: var(--color-quote-callout-quote);

  > *:last-child {
    margin-top: 0;
    margin-bottom: 0;
  }
}

.quote-callout__attribution {
  font: var(--font-style-body-default);
  color: var(--color-quote-callout-attribution);
  margin-top: var(--size-spacing-3);
  display: inline-flex;

  > p {
    margin: 0;
  }
}

.quote-callout__image {
  width: 100%;
  max-width: 60%;
  align-self: flex-start;

  @media (min-width: tokens.$break-mobile) {
    flex: 1 0 calc(30% - var(--size-spacing-8));

    // push the image down a bit to align with the quote text
    margin-top: var(--size-spacing-4);
  }
}
