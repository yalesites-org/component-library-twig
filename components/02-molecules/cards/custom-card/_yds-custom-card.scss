@use '../../../01-atoms/atoms';
@use '../../../00-tokens/tokens';
@use '../../../00-tokens/functions/map';

$global-card-themes: map.deep-get(tokens.$tokens, 'global-themes');

.custom-card {
  @include atoms.clickable-component-heading-link;

  // only animate if animation is enabled in site configuration.
  [data-site-animation='artistic'] & {
    @include tokens.animate($property: 'transform');
    @include tokens.rise-effect;
  }

  --card-border: 1px solid var(--color-gray-200);
  --color-text-shadow: var(--color-basic-white);
  --color-card-bar-long: var(--color-blue-shale);
  --color-card-bar-short: var(--color-blue-horizon);

  display: grid;
  grid-template-columns: 1fr 2fr;
  column-gap: var(--size-spacing-6);
  grid-template-areas: 'image content';

  &[data-with-image='false'] {
    grid-template-areas:
      'image'
      'content';
    grid-template-columns: 1fr;
    border: var(--card-border);
  }

  &:hover {
    cursor: pointer;
  }

  @media (min-width: tokens.$break-s) {
    &[data-with-image='true'] {
      [data-collection-featured='true'] & {
        grid-template-columns: repeat(2, 1fr);
      }

      [data-collection-featured='false'] & {
        grid-template-columns: 1fr 2fr;
        grid-template-areas: 'image content';
      }
    }
  }

  @media (min-width: tokens.$break-m) {
    flex-basis: 100%;
    display: flex;
    flex-direction: column-reverse;

    &:hover {
      box-shadow: var(--drop-shadow-level-1);
    }
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-card-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
      --color-card-bar-long: var(--color-slot-two);
      --color-card-bar-short: var(--color-slot-one);
    }
  }
}

.custom-card__content {
  padding: var(--size-spacing-5) 0;
  grid-area: content;

  [data-with-image='false'] & {
    padding: var(--size-spacing-5);

    @media (min-width: tokens.$break-m) {
      // without images, allow the content to grow so columns can stretch.
      flex: 1 auto;
    }
  }

  @media (min-width: tokens.$break-m) {
    padding: var(--size-spacing-5) var(--size-spacing-6);

    [data-with-image='true'] & {
      border-top: 0;
      border-left: var(--card-border);
      border-right: var(--card-border);
      border-bottom: var(--card-border);
      flex: 1;
    }
  }
}

.custom-card__heading {
  @include tokens.h4-yale-new;

  margin-bottom: var(--size-spacing-3);
}

.custom-card__snippet {
  @include tokens.body-default-condensed;

  > *:last-child {
    margin-bottom: 0;
  }

  a {
    @include atoms.link;

    &:has(> i.fa-icon) {
      padding-right: var(--size-spacing-5);
    }
  }
}

.custom-card__image {
  grid-area: image;

  [data-collection-featured='false'] & {
    min-height: 0.25rem;

    @media (min-width: tokens.$break-m) {
      min-height: 0.375rem;
    }
  }

  // if the custom card is not part of a featured card collection
  // and it doesn't have images
  // show a top bar and animate it.
  // If a global theme is active, the --color-card-bar-long and --color-card-bar-short
  // will change from default colors to color slots.
  [data-collection-featured='false'] [data-with-image='false'] & {
    background-color: var(--color-card-bar-long);
    position: relative;

    &::before {
      @include tokens.animate(width);

      content: '';
      background-color: var(--color-card-bar-short);
      height: 100%;
      width: 25%;
      position: absolute;
      right: 0;
      top: 0;
    }
  }

  // change hover background gradient and animate it.
  .custom-card:hover & {
    [data-collection-featured='false'] & {
      &::before {
        width: 0%;
      }
    }
  }

  @media (min-width: tokens.$break-s) {
    [data-with-image='true'] & {
      background: none;
    }
  }
}
